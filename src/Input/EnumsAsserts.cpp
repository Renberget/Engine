#pragma once
#include "Impl.hpp"

namespace input
{
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Unknown) == GLFW_KEY_UNKNOWN);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Space) == GLFW_KEY_SPACE);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Apostrophe) == GLFW_KEY_APOSTROPHE);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Comma) == GLFW_KEY_COMMA);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Minus) == GLFW_KEY_MINUS);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Period) == GLFW_KEY_PERIOD);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Slash) == GLFW_KEY_SLASH);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Num0) == GLFW_KEY_0);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Num1) == GLFW_KEY_1);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Num2) == GLFW_KEY_2);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Num3) == GLFW_KEY_3);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Num4) == GLFW_KEY_4);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Num5) == GLFW_KEY_5);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Num6) == GLFW_KEY_6);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Num7) == GLFW_KEY_7);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Num8) == GLFW_KEY_8);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Num9) == GLFW_KEY_9);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Semicolon) == GLFW_KEY_SEMICOLON);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Equal) == GLFW_KEY_EQUAL);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::A) == GLFW_KEY_A);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::B) == GLFW_KEY_B);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::C) == GLFW_KEY_C);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::D) == GLFW_KEY_D);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::E) == GLFW_KEY_E);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F) == GLFW_KEY_F);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::G) == GLFW_KEY_G);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::H) == GLFW_KEY_H);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::I) == GLFW_KEY_I);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::J) == GLFW_KEY_J);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::K) == GLFW_KEY_K);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::L) == GLFW_KEY_L);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::M) == GLFW_KEY_M);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::N) == GLFW_KEY_N);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::O) == GLFW_KEY_O);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::P) == GLFW_KEY_P);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Q) == GLFW_KEY_Q);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::R) == GLFW_KEY_R);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::S) == GLFW_KEY_S);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::T) == GLFW_KEY_T);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::U) == GLFW_KEY_U);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::V) == GLFW_KEY_V);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::W) == GLFW_KEY_W);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::X) == GLFW_KEY_X);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Y) == GLFW_KEY_Y);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Z) == GLFW_KEY_Z);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::LeftBracket) == GLFW_KEY_LEFT_BRACKET);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Backslash) == GLFW_KEY_BACKSLASH);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::RightBracket) == GLFW_KEY_RIGHT_BRACKET);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::World1) == GLFW_KEY_WORLD_1);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::World2) == GLFW_KEY_WORLD_2);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Escape) == GLFW_KEY_ESCAPE);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Enter) == GLFW_KEY_ENTER);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Tab) == GLFW_KEY_TAB);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Backspace) == GLFW_KEY_BACKSPACE);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Insert) == GLFW_KEY_INSERT);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Delete) == GLFW_KEY_DELETE);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Right) == GLFW_KEY_RIGHT);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Left) == GLFW_KEY_LEFT);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Down) == GLFW_KEY_DOWN);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Up) == GLFW_KEY_UP);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::PageUp) == GLFW_KEY_PAGE_UP);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::PageDown) == GLFW_KEY_PAGE_DOWN);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Home) == GLFW_KEY_HOME);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::End) == GLFW_KEY_END);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::CapsLock) == GLFW_KEY_CAPS_LOCK);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::ScrollLock) == GLFW_KEY_SCROLL_LOCK);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::NumLock) == GLFW_KEY_NUM_LOCK);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::PrintScreen) == GLFW_KEY_PRINT_SCREEN);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Pause) == GLFW_KEY_PAUSE);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F1) == GLFW_KEY_F1);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F2) == GLFW_KEY_F2);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F3) == GLFW_KEY_F3);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F4) == GLFW_KEY_F4);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F5) == GLFW_KEY_F5);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F6) == GLFW_KEY_F6);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F7) == GLFW_KEY_F7);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F8) == GLFW_KEY_F8);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F9) == GLFW_KEY_F9);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F10) == GLFW_KEY_F10);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F11) == GLFW_KEY_F11);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F12) == GLFW_KEY_F12);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F13) == GLFW_KEY_F13);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F14) == GLFW_KEY_F14);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F15) == GLFW_KEY_F15);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F16) == GLFW_KEY_F16);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F17) == GLFW_KEY_F17);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F18) == GLFW_KEY_F18);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F19) == GLFW_KEY_F19);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F20) == GLFW_KEY_F20);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F21) == GLFW_KEY_F21);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F22) == GLFW_KEY_F22);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F23) == GLFW_KEY_F23);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F24) == GLFW_KEY_F24);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::F25) == GLFW_KEY_F25);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Keypad0) == GLFW_KEY_KP_0);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Keypad1) == GLFW_KEY_KP_1);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Keypad2) == GLFW_KEY_KP_2);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Keypad3) == GLFW_KEY_KP_3);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Keypad4) == GLFW_KEY_KP_4);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Keypad5) == GLFW_KEY_KP_5);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Keypad6) == GLFW_KEY_KP_6);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Keypad7) == GLFW_KEY_KP_7);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Keypad8) == GLFW_KEY_KP_8);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Keypad9) == GLFW_KEY_KP_9);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::KeypadDecimal) == GLFW_KEY_KP_DECIMAL);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::KeypadDivide) == GLFW_KEY_KP_DIVIDE);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::KeypadMultiply) == GLFW_KEY_KP_MULTIPLY);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::KeypadSubtract) == GLFW_KEY_KP_SUBTRACT);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::KeypadAdd) == GLFW_KEY_KP_ADD);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::KeypadEnter) == GLFW_KEY_KP_ENTER);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::KeypadEqual) == GLFW_KEY_KP_EQUAL);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::LeftShift) == GLFW_KEY_LEFT_SHIFT);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::LeftControl) == GLFW_KEY_LEFT_CONTROL);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::LeftAlt) == GLFW_KEY_LEFT_ALT);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::LeftSuper) == GLFW_KEY_LEFT_SUPER);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::RightShift) == GLFW_KEY_RIGHT_SHIFT);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::RightControl) == GLFW_KEY_RIGHT_CONTROL);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::RightAlt) == GLFW_KEY_RIGHT_ALT);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::RightSuper) == GLFW_KEY_RIGHT_SUPER);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::Menu) == GLFW_KEY_MENU);
	static_assert(static_cast<std::underlying_type_t<Key>>(Key::EnumEnd) == GLFW_KEY_LAST + 1);

	static_assert(static_cast<std::underlying_type_t<Mouse>>(Mouse::Button::Left) == GLFW_MOUSE_BUTTON_LEFT);
	static_assert(static_cast<std::underlying_type_t<Mouse>>(Mouse::Button::Right) == GLFW_MOUSE_BUTTON_RIGHT);
	static_assert(static_cast<std::underlying_type_t<Mouse>>(Mouse::Button::Middle) == GLFW_MOUSE_BUTTON_MIDDLE);
	static_assert(static_cast<std::underlying_type_t<Mouse>>(Mouse::Button::Button1) == GLFW_MOUSE_BUTTON_4);
	static_assert(static_cast<std::underlying_type_t<Mouse>>(Mouse::Button::Button2) == GLFW_MOUSE_BUTTON_5);
	static_assert(static_cast<std::underlying_type_t<Mouse>>(Mouse::Button::Button3) == GLFW_MOUSE_BUTTON_6);
	static_assert(static_cast<std::underlying_type_t<Mouse>>(Mouse::Button::Button4) == GLFW_MOUSE_BUTTON_7);
	static_assert(static_cast<std::underlying_type_t<Mouse>>(Mouse::Button::Button5) == GLFW_MOUSE_BUTTON_8);

	static_assert(static_cast<std::underlying_type_t<Gamepad::Button>>(Gamepad::Button::A) == GLFW_GAMEPAD_BUTTON_A);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Button>>(Gamepad::Button::B) == GLFW_GAMEPAD_BUTTON_B);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Button>>(Gamepad::Button::X) == GLFW_GAMEPAD_BUTTON_X);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Button>>(Gamepad::Button::Y) == GLFW_GAMEPAD_BUTTON_Y);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Button>>(Gamepad::Button::LeftBumper) == GLFW_GAMEPAD_BUTTON_LEFT_BUMPER);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Button>>(Gamepad::Button::RightBumper) == GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Button>>(Gamepad::Button::Back) == GLFW_GAMEPAD_BUTTON_BACK);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Button>>(Gamepad::Button::Start) == GLFW_GAMEPAD_BUTTON_START);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Button>>(Gamepad::Button::Guide) == GLFW_GAMEPAD_BUTTON_GUIDE);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Button>>(Gamepad::Button::LeftThumb) == GLFW_GAMEPAD_BUTTON_LEFT_THUMB);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Button>>(Gamepad::Button::RightThumb) == GLFW_GAMEPAD_BUTTON_RIGHT_THUMB);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Button>>(Gamepad::Button::DPadUp) == GLFW_GAMEPAD_BUTTON_DPAD_UP);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Button>>(Gamepad::Button::DPadRight) == GLFW_GAMEPAD_BUTTON_DPAD_RIGHT);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Button>>(Gamepad::Button::DPadDown) == GLFW_GAMEPAD_BUTTON_DPAD_DOWN);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Button>>(Gamepad::Button::DPadLeft) == GLFW_GAMEPAD_BUTTON_DPAD_LEFT);

	static_assert(static_cast<std::underlying_type_t<Gamepad::Axis>>(Gamepad::Axis::LeftAxisX) == GLFW_GAMEPAD_AXIS_LEFT_X);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Axis>>(Gamepad::Axis::LeftAxisY) == GLFW_GAMEPAD_AXIS_LEFT_Y);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Axis>>(Gamepad::Axis::RightAxisX) == GLFW_GAMEPAD_AXIS_RIGHT_X);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Axis>>(Gamepad::Axis::RightAxisY) == GLFW_GAMEPAD_AXIS_RIGHT_Y);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Axis>>(Gamepad::Axis::LeftTrigger) == GLFW_GAMEPAD_AXIS_LEFT_TRIGGER);
	static_assert(static_cast<std::underlying_type_t<Gamepad::Axis>>(Gamepad::Axis::RightTrigger) == GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER);
}